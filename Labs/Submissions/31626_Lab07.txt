/*
EXERCISE 1
Matrix Multiplication
*/

#include <iostream>
using namespace std;

int main() {
    int rows1, cols1, rows2, cols2;

    cout << "Matrix Dimentions" << endl << endl;

    cout << "Matrix 1 rows: ";
    cin >> rows1;
    cout << "Matrix 1 columns: ";
    cin >> cols1;
    cout << endl;

    cout << "Matrix 2 rows: ";
    cin >> rows2;
    cout << "Matrix 2 columns: ";
    cin >> cols2;
    cout << endl;

    if (cols1 != rows2) {
        cout << "Matrix multiplication not possible for given dimensions." << endl;
        cout << "The columns of matrix 1 must be equal to rows to matrix 2." << endl;
        return 0;
    }

    int rows3 = rows1, cols3 = cols2;

    cout << "Result Matrix rows: " << rows3 << endl;
    cout << "Result Matrix columns: " << cols3 << endl << endl;

    int matrix1[rows1][cols1];
    int matrix2[rows2][cols2];
    int matrix3[rows3][cols3] = {};

    cout << "Input Matrix 1 Elements" << endl;
    for (int i = 0; i < rows1; i++)
        for (int j = 0; j < cols1; j++) {
            cout << "Enter element at row " << i+1 << " col " << j+1 << ": ";
            cin >> matrix1[i][j];
        }

    cout << endl << "Input Matrix 2 Elements" << endl;
    for (int i = 0; i < rows2; i++)
        for (int j = 0; j < cols2; j++) {
            cout << "Enter element at row " << i+1 << " col " << j+1 << ": ";
            cin >> matrix2[i][j];
        }

    for (int i = 0; i < rows3; i++)
        for (int j = 0; j < cols3; j++)
            for (int k = 0; k < cols1; k++) {
                matrix3[i][j] += matrix1[i][k] * matrix2[k][j];
            }

    cout << endl;

    cout << "Matrix 1" << endl;
    for (int i = 0; i < rows1; i++) {
        for (int j = 0; j < cols1; j++) {
            cout << matrix1[i][j] << " ";
        }
        cout << endl;
    }
    cout << endl;

    cout << "Matrix 2" << endl;
    for (int i = 0; i < rows2; i++) {
        for (int j = 0; j < cols2; j++) {
            cout << matrix2[i][j] << " ";
        }
        cout << endl;
    }
    cout << endl;

    cout << "Result Matrix" << endl;
    for (int i = 0; i < rows3; i++) {
        for (int j = 0; j < cols3; j++) {
            cout << matrix3[i][j] << " ";
        }
        cout << endl;
    }
    cout << endl;

}

/*
EXERCISE 2
Bubble Sort
*/

#include <iostream>
using namespace std;

int main() {
    int n;
    
    cout << "Enter number of items: ";
    cin >> n;

    int arr[n];

    for (int i = 0; i < n; i++) {
        cout << "Enter item " << i+1 << ": ";
        cin >> arr[i];
    }

    for (int i = 0; i < n-1; i++)
        for (int j = 0; j < n-1-i; j++)
            if (arr[j] > arr[j+1]) {
                arr[j] = arr[j] + arr[j+1];
                arr[j+1] = arr[j] - arr[j+1];
                arr[j] = arr[j] - arr[j+1];
            }

    for (int item : arr) {
        cout << item << " ";
    }
    cout << endl;
}

/*
EXERCISE 3
Merge Sort

Assume that numbers input are in ascending order.
*/

#include <iostream>
using namespace std;

int main() {
    int n1, n2;

    cout << "Enter size of array 1: ";
    cin >> n1;

    cout << "Enter size of array 2: ";
    cin >> n2;

    cout << endl;

    int arr1[n1], arr2[n2], arr3[n1+n2]{};

    cout << "Input Array 1 Items" << endl;
    for (int i = 0; i < n1; i++) {
        cout << "Enter item " << i+1 << ": ";
        cin >> arr1[i];
    }
    cout << endl;

    cout << "Input Array 2 Items" << endl;
    for (int j = 0; j < n2; j++) {
        cout << "Enter item " << j+1 << ": ";
        cin >> arr2[j];
    }
    cout << endl;

    int i = 0; // array 1 index
    int j = 0; // array 2 index
    int k = 0; // array 3 index

    // Transfer values in sorted order

    while (i < n1 && j < n2) {
        if (arr1[i] < arr2[j]) {
            arr3[k] = arr1[i];
            i++;
        } else {
            arr3[k] = arr2[j];
            j++;
        }
        k++;
    }
    
    // Transfer remaining array1 values

    while (i < n1) {
        arr3[k] = arr1[i];
        i++;
        k++;
    }

    // Transfer remaining array 2 values

    while (j < n2) {
        arr3[k] = arr2[j];
        j++;
        k++;
    }

    // Display merged array

    cout << "Merged Array" << endl;
    for (int n : arr3) {
        cout << n << " ";
    }
    cout << endl;
}